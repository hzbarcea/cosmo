#!/usr/bin/perl -w
# -*- Mode: Perl; indent-tabs-mode: nil; -*-
# 
# Copyright 2005-2006 Open Source Applications Foundation
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

use strict;

use Cosmo::CMP ();
use Cosmo::DAV ();
use Cosmo::User ();
use File::Basename ();
use Getopt::Long ();

BEGIN { $0 = File::Basename::basename($0) }

use constant VERSION => '0.02';
use constant PROGRAM => $0;
use constant USAGE => <<EOT;
Usage: $0 [OPTIONS...]

A script that simulates a Cosmo client to run through standard
scenarios.

Options:
  -s               server root URL (defaults to http://localhost:8080)
  -u               admin username (defaults to root)
  -p               admin password (defaults to cosmo)
  -d               print debugging information to STDOUT
  -h               list available command line options (this page)
  -v               print version information and exit

Report bugs to $0-cosmo\@osafoundation.org
EOT

use constant DEFAULT_SERVER_URL => 'http://localhost:8080';
use constant DEFAULT_ADMIN_USERNAME => 'root';
use constant DEFAULT_ADMIN_PASSWORD => 'cosmo';

$SIG{__DIE__} = sub { die sprintf("%s: %s", PROGRAM, $_[0]) };

my ($server_url, $admin_username, $admin_password,
    $opt_debug, $opt_help, $opt_version);

# process command line options
Getopt::Long::GetOptions(
    "s=s" => \$server_url,
    "u=s" => \$admin_username,
    "p=s" => \$admin_password,
    "d"   => \$opt_debug,
    "h"   => \$opt_help,
    "v"   => \$opt_version,
    );
(print USAGE and exit) if $opt_help;
(print sprintf("%s/%s\n", PROGRAM, VERSION) and exit) if $opt_version;

$server_url ||= DEFAULT_SERVER_URL;
chop($server_url) if $server_url =~ m|/$|;
$admin_username ||= DEFAULT_ADMIN_USERNAME;
$admin_password ||= DEFAULT_ADMIN_PASSWORD;

# make a test user, run a publish cycle, then remove the test user

my $cmp = cmp_connect();
my $user = create_user($cmp);
my $dav = dav_connect($user);
publish($dav);
unpublish($dav);
remove_user($cmp, $user);

exit;

sub cmp_connect {
    my $cmp = Cosmo::CMP->new($server_url, $admin_username, $admin_password,
                              $opt_debug);
    $cmp->agent(PROGRAM . "/" . VERSION);

    $cmp->check_server_availability();
    return $cmp;
}

sub create_user {
    my $cmp = shift;

    my $username = PROGRAM . "-" . VERSION;
    my $user = Cosmo::User->new();
    $user->username($username);
    $user->password($username);
    $user->first_name(PROGRAM);
    $user->last_name(VERSION);
    $user->email("$username\@localhost");

    $cmp->create_user($user);
    print "Created account at " . $user->user_url() . "\n";

    return $user;
}

sub dav_connect {
    my $user = shift;

    my $dav = Cosmo::DAV->new($server_url, $user->username(),
                              $user->password(), $opt_debug);
    $dav->agent(PROGRAM . "/" . VERSION);

    $dav->check_server_availability();
    return $dav;
}

sub publish {
    print "publishing\n" if $opt_debug;
}

sub unpublish {
    print "unpublishing\n" if $opt_debug;
}

sub remove_user {
    my $cmp = shift;
    my $user = shift;

    $cmp->remove_user($user);
    print "Removed account at " . $user->user_url() . "\n";
}
